# ===========================================
# Makefile pour OCR Word Search Solver
# ===========================================

# Compilateur et flags
CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -g -O2
CFLAGS_DEBUG = -Wall -Wextra -std=c99 -g -O0 -DDEBUG -fsanitize=address
CFLAGS_RELEASE = -Wall -Wextra -std=c99 -O3 -DNDEBUG

# Biblioth√®ques
LIBS = -lm -lsdl2 -lsdl2_image -lpng -ljpeg -lblas -llapack
GTK_FLAGS = `pkg-config --cflags --libs gtk+-3.0`
LDFLAGS = $(LIBS) $(GTK_FLAGS)

# R√©pertoires
SRCDIR = src
INCDIR = include
OBJDIR = obj
TESTDIR = tests
BINDIR = bin

# Fichiers sources organis√©s par modules
CORE_SRC = $(SRCDIR)/main.c

IMAGE_SRC = $(wildcard $(SRCDIR)/image_processing/*.c)
NEURAL_SRC = $(wildcard $(SRCDIR)/neural_network/*.c)
SOLVER_SRC = $(wildcard $(SRCDIR)/word_search_solver/*.c)
GUI_SRC = $(wildcard $(SRCDIR)/gui/*.c)
UTILS_SRC = $(wildcard $(SRCDIR)/utils/*.c)

# Tous les fichiers sources (sauf main.c et solver.c)
ALL_SRC = $(IMAGE_SRC) $(NEURAL_SRC) $(SOLVER_SRC) $(GUI_SRC) $(UTILS_SRC)
MAIN_SRC = $(CORE_SRC) $(ALL_SRC)

# Fichiers objets correspondants
CORE_OBJ = $(CORE_SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
IMAGE_OBJ = $(IMAGE_SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
NEURAL_OBJ = $(NEURAL_SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
SOLVER_OBJ = $(SOLVER_SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
GUI_OBJ = $(GUI_SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
UTILS_OBJ = $(UTILS_SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o)

ALL_OBJ = $(ALL_SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
MAIN_OBJ = $(MAIN_SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o)

# Fichiers de test
TEST_SRC = $(wildcard $(TESTDIR)/*.c)
TEST_OBJ = $(TEST_SRC:$(TESTDIR)/%.c=$(OBJDIR)/tests/%.o)

# Ex√©cutables
MAIN_TARGET = $(BINDIR)/word_search_solver
SOLVER_TARGET = $(BINDIR)/solver
TEST_TARGET = $(BINDIR)/run_tests

# Fichiers headers pour d√©pendances
HEADERS = $(wildcard $(INCDIR)/*.h $(INCDIR)/**/*.h)

# ===========================================
# R√àGLES PRINCIPALES
# ===========================================

.PHONY: all clean debug release test install uninstall help

# Cible par d√©faut
all: $(MAIN_TARGET) $(SOLVER_TARGET)

# Version debug avec AddressSanitizer
debug: CFLAGS = $(CFLAGS_DEBUG)
debug: $(MAIN_TARGET) $(SOLVER_TARGET)

# Version release optimis√©e
release: CFLAGS = $(CFLAGS_RELEASE)
release: $(MAIN_TARGET) $(SOLVER_TARGET)

# ===========================================
# CONSTRUCTION DES EX√âCUTABLES
# ===========================================

# Application principale avec GUI
$(MAIN_TARGET): $(MAIN_OBJ) | $(BINDIR)
	$(CC) $(MAIN_OBJ) -o $@ $(LDFLAGS)
	@echo "‚úÖ Application principale cr√©√©e : $@"

# Programme solver en ligne de commande (obligatoire pour soutenance 1)
$(SOLVER_TARGET): $(OBJDIR)/word_search_solver/solver.o $(OBJDIR)/word_search_solver/solver_core.o $(UTILS_OBJ) | $(BINDIR)
	$(CC) $^ -o $@ -lm
	@echo "‚úÖ Programme solver cr√©√© : $@"

# Tests unitaires
$(TEST_TARGET): $(TEST_OBJ) $(ALL_OBJ) | $(BINDIR)
	$(CC) $^ -o $@ $(LDFLAGS)
	@echo "‚úÖ Tests cr√©√©s : $@"

# ===========================================
# COMPILATION DES OBJETS
# ===========================================

# R√®gle g√©n√©rale pour tous les fichiers objets
$(OBJDIR)/%.o: $(SRCDIR)/%.c $(HEADERS) | $(OBJDIR)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) `pkg-config --cflags gtk+-3.0` -I$(INCDIR) -c $< -o $@
	@echo "üî® Compil√© : $<"

# Compilation des tests
$(OBJDIR)/tests/%.o: $(TESTDIR)/%.c $(HEADERS) | $(OBJDIR)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -I$(INCDIR) -c $< -o $@
	@echo "üß™ Test compil√© : $<"

# ===========================================
# CIBLES DE MODULES INDIVIDUELS
# ===========================================

# Module traitement d'image (Membre B)
image: $(IMAGE_OBJ)
	@echo "üì∑ Module image processing compil√©"

# Module r√©seau de neurones (Membre C)
neural: $(NEURAL_OBJ)
	@echo "ü§ñ Module neural network compil√©"

# Module solver (Membre D)
solver: $(SOLVER_OBJ)
	@echo "üß© Module word search solver compil√©"

# Module GUI (Membre D)
gui: $(GUI_OBJ)
	@echo "üñ•Ô∏è  Module GUI compil√©"

# Module utilitaires
utils: $(UTILS_OBJ)
	@echo "üîß Module utils compil√©"

# ===========================================
# TESTS ET VALIDATION
# ===========================================

# Ex√©cuter tous les tests
test: $(TEST_TARGET)
	@echo "üß™ Ex√©cution des tests..."
	./$(TEST_TARGET)

# Test sp√©cifique du solver (obligatoire soutenance 1)
test-solver: $(SOLVER_TARGET)
	@echo "üß© Test du programme solver..."
	@echo "HELLO" > test_grid.txt
	@echo "WORLD" >> test_grid.txt
	./$(SOLVER_TARGET) test_grid.txt HELLO
	./$(SOLVER_TARGET) test_grid.txt WORLD
	./$(SOLVER_TARGET) test_grid.txt NOTFOUND
	@rm -f test_grid.txt

# Test des fuites m√©moire avec valgrind
memcheck: debug
	@echo "üîç V√©rification m√©moire avec valgrind..."
	valgrind --leak-check=full --show-leak-kinds=all ./$(MAIN_TARGET)

# V√©rification du code avec cppcheck (optionnel)
static-check:
	@echo "üîç Analyse statique du code..."
	cppcheck --enable=all --inconclusive --std=c99 $(SRCDIR)/

# ===========================================
# INSTALLATION ET D√âPLOIEMENT
# ===========================================

# Installation syst√®me (n√©cessite sudo)
install: release
	@echo "üì¶ Installation du syst√®me..."
	sudo cp $(MAIN_TARGET) /usr/local/bin/
	sudo cp $(SOLVER_TARGET) /usr/local/bin/
	sudo mkdir -p /usr/local/share/word-search-solver
	sudo cp -r images/samples /usr/local/share/word-search-solver/
	@echo "‚úÖ Installation termin√©e"

# D√©sinstallation
uninstall:
	@echo "üóëÔ∏è  D√©sinstallation..."
	sudo rm -f /usr/local/bin/word_search_solver
	sudo rm -f /usr/local/bin/solver
	sudo rm -rf /usr/local/share/word-search-solver
	@echo "‚úÖ D√©sinstallation termin√©e"

# ===========================================
# DOCUMENTATION ET LIVRABILES
# ===========================================

# G√©n√©ration de la documentation (si Doxygen install√©)
doc:
	@if command -v doxygen >/dev/null 2>&1; then \
		echo "üìö G√©n√©ration de la documentation..."; \
		doxygen Doxyfile; \
	else \
		echo "‚ö†Ô∏è  Doxygen non install√©. Documentation non g√©n√©r√©e."; \
	fi

# Pr√©paration pour soutenance (compile tout + tests)
soutenance: clean release test-solver
	@echo "üéØ Pr√©paration soutenance termin√©e!"
	@echo "üìÅ V√©rifiez que tous les fichiers sont pr√©sents:"
	@ls -la $(BINDIR)/
	@echo "üìÑ N'oubliez pas le rapport et le plan de soutenance!"

# Package pour rendu (sans les binaires)
package:
	@echo "üì¶ Cr√©ation du package de rendu..."
	tar -czf ocr_word_search_$(shell date +%Y%m%d).tar.gz \
		--exclude='$(OBJDIR)' \
		--exclude='$(BINDIR)' \
		--exclude='*.tar.gz' \
		--exclude='.git' \
		src/ include/ tests/ images/ Makefile README AUTHORS *.pdf
	@echo "‚úÖ Package cr√©√© : ocr_word_search_$(shell date +%Y%m%d).tar.gz"

# ===========================================
# NETTOYAGE
# ===========================================

# Nettoyage des fichiers objets et ex√©cutables
clean:
	@echo "üßπ Nettoyage..."
	rm -rf $(OBJDIR)
	rm -rf $(BINDIR)
	rm -f *.tar.gz
	rm -f test_grid.txt
	@echo "‚úÖ Nettoyage termin√©"

# Nettoyage complet (inclut documentation)
clean-all: clean
	rm -rf doc/
	@echo "‚úÖ Nettoyage complet termin√©"

# ===========================================
# CR√âATION DES R√âPERTOIRES
# ===========================================

$(OBJDIR):
	mkdir -p $(OBJDIR)
	mkdir -p $(OBJDIR)/image_processing
	mkdir -p $(OBJDIR)/neural_network
	mkdir -p $(OBJDIR)/word_search_solver
	mkdir -p $(OBJDIR)/gui
	mkdir -p $(OBJDIR)/utils
	mkdir -p $(OBJDIR)/tests

$(BINDIR):
	mkdir -p $(BINDIR)

# ===========================================
# INFORMATIONS ET AIDE
# ===========================================

# Affichage de l'aide
help:
	@echo "üìã OCR Word Search Solver - Makefile"
	@echo "======================================"
	@echo ""
	@echo "üéØ CIBLES PRINCIPALES:"
	@echo "  all          - Compile tout (d√©faut)"
	@echo "  debug        - Compile en mode debug"
	@echo "  release      - Compile en mode release"
	@echo "  clean        - Nettoie les fichiers g√©n√©r√©s"
	@echo ""
	@echo "üèóÔ∏è  MODULES:"
	@echo "  image        - Module traitement d'image"
	@echo "  neural       - Module r√©seau de neurones"
	@echo "  solver       - Module r√©solution grilles"
	@echo "  gui          - Module interface graphique"
	@echo "  utils        - Module utilitaires"
	@echo ""
	@echo "üß™ TESTS:"
	@echo "  test         - Lance tous les tests"
	@echo "  test-solver  - Test sp√©cifique du solver"
	@echo "  memcheck     - V√©rification m√©moire (valgrind)"
	@echo ""
	@echo "üéì SOUTENANCE:"
	@echo "  soutenance   - Pr√©paration compl√®te"
	@echo "  package      - Cr√©ation package rendu"
	@echo ""
	@echo "üì¶ SYST√àME:"
	@echo "  install      - Installation syst√®me"
	@echo "  uninstall    - D√©sinstallation"
	@echo ""

# Informations sur la compilation
info:
	@echo "‚ÑπÔ∏è  INFORMATIONS DE COMPILATION"
	@echo "==============================="
	@echo "Compilateur    : $(CC)"
	@echo "Flags C        : $(CFLAGS)"
	@echo "Biblioth√®ques  : $(LIBS)"
	@echo "GTK Flags      : $(GTK_FLAGS)"
	@echo "R√©pertoires    : src=$(SRCDIR), obj=$(OBJDIR), bin=$(BINDIR)"
	@echo "Fichiers src   : $(words $(MAIN_SRC)) fichiers"
	@echo "Headers        : $(words $(HEADERS)) fichiers"

# V√©rification des d√©pendances
check-deps:
	@echo "üîç V√âRIFICATION DES D√âPENDANCES"
	@echo "==============================="
	@echo -n "GCC: "
	@command -v gcc >/dev/null 2>&1 && echo "‚úÖ Install√©" || echo "‚ùå Manquant"
	@echo -n "Make: "
	@command -v make >/dev/null 2>&1 && echo "‚úÖ Install√©" || echo "‚ùå Manquant"
	@echo -n "SDL2: "
	@pkg-config --exists sdl2 2>/dev/null && echo "‚úÖ Install√©" || echo "‚ùå Manquant"
	@echo -n "GTK+3: "
	@pkg-config --exists gtk+-3.0 2>/dev/null && echo "‚úÖ Install√©" || echo "‚ùå Manquant"
	@echo -n "libpng: "
	@pkg-config --exists libpng 2>/dev/null && echo "‚úÖ Install√©" || echo "‚ùå Manquant"
	@echo -n "Valgrind: "
	@command -v valgrind >/dev/null 2>&1 && echo "‚úÖ Install√©" || echo "‚ùå Manquant (optionnel)"

# ===========================================
# D√âPENDANCES AUTOMATIQUES
# ===========================================

# Inclusion des d√©pendances automatiques (optionnel)
-include $(ALL_OBJ:.o=.d)

# G√©n√©ration des d√©pendances
$(OBJDIR)/%.d: $(SRCDIR)/%.c | $(OBJDIR)
	@mkdir -p $(dir $@)
	@$(CC) -MM -I$(INCDIR) $< > $@.tmp
	@sed 's,\($*\)\.o[ :]*,$(OBJDIR)/\1.o $@ : ,g' < $@.tmp > $@
	@rm -f $@.tmp